#Grady['Artist'].isin(Anika['Artist']).value_counts()
#Paige['Artist'].isin(Grady['Artist']).value_counts()
#this technique from https://datascience.stackexchange.com/questions/33053/how-do-i-compare-columns-in-different-data-frames



list1 = Grady['Artist'].values.tolist()
list2 = Krista['Artist'].values.tolist()
intList = []
for element in list1:
    if element in list2:
        newList.append(element)
print("Intersection of the lists is:", newList)
print(len(newList))
#finally, we got it!
#this technique from https://www.pythonforbeginners.com/basics/intersection-of-lists-in-python


#Aatmik = df.loc[df.Name=='Aatmik']
#Andi = df.loc[df.Name=='Andi']
#print(Aatmik['Artist'].isin(Andi['Artist']).value_counts())
#above is testing


for index, row in relationships2.iterrows():
    df1 = df.loc[df.Name==row['DJ_1']]
    df2 = df.loc[df.Name==row['DJ_2']]
    list1 = df1['Artist'].values.tolist()
    list2 = df2['Artist'].values.tolist()
    print(row['DJ_1'],row['DJ_2'])
    intList = []
    for element in list1:
        if element in list2:
            intList.append(element)
    print("Intersection of the lists is:", intList)
    print(len(intList))
    
    
    ramona = df.loc[df.Name=='ramona jade'].head(800)
xenfoyel = df.loc[df.Name=='xenfoyel'].head(800)


list1 = ramona['Artist'].values.tolist()
list2 = xenfoyel['Artist'].values.tolist()
intList = []
newList = []
for element in list1:
    if element in list2:
        newList.append(element)
for element in list2:
    if element in list1:
        intList.append(element)
print("Intersection of the lists is:", newList, intList)
print((len(newList)+len(intList))/2)




#Choose colors for node and edge highlighting
node_highlight_color = 'white'
edge_highlight_color = 'black'

#Pick a color palette — Blues8, Reds8, Purples8, Oranges8, Viridis8
color_palette = Blues8

#Choose a title!
title = 'WPRB'

#Establish which categories will appear when hovering over each node
HOVER_TOOLTIPS = [
       ("Character", "@index")
]

#Create a plot — set dimensions, toolbar, and title
plot = figure(tooltips = HOVER_TOOLTIPS,
              tools="pan,wheel_zoom,save,reset", active_scroll='wheel_zoom',
            x_range=Range1d(-10.1, 10.1), y_range=Range1d(-10.1, 10.1), title=title)

#Create a network graph object
# https://networkx.github.io/documentation/networkx-1.9/reference/generated/networkx.drawing.layout.spring_layout.html
network_graph = from_networkx(netty, net.spring_layout, scale=10, center=(0, 0))

#Set node highlight colors
network_graph.node_renderer.hover_glyph = Circle(size=size_by_this_attribute, fill_color=node_highlight_color, line_width=2)
network_graph.node_renderer.selection_glyph = Circle(size=size_by_this_attribute, fill_color=node_highlight_color, line_width=2)

#Set edge opacity and width
network_graph.edge_renderer.glyph = MultiLine(line_alpha=0.3, line_width='Weight')
#Set edge highlight colors
network_graph.edge_renderer.selection_glyph = MultiLine(line_color=edge_highlight_color, line_width=2)
network_graph.edge_renderer.hover_glyph = MultiLine(line_color=edge_highlight_color, line_width=2)

    #Highlight nodes and edges


plot.renderers.append(network_graph)

#Add Labels
x, y = zip(*network_graph.layout_provider.graph_layout.values())
node_labels = list(G.nodes())
source = ColumnDataSource({'x': x, 'y': y, 'name': [node_labels[i] for i in range(len(x))]})
labels = LabelSet(x='x', y='y', text='name', source=source, background_fill_color='white', text_font_size='10px', background_fill_alpha=.7)
plot.renderers.append(labels)

show(plot)
# If we want to save the plot, uncomment the line below and run this cell. It will save this plot as an HTML file
#save(plot, filename=f"{title}.html")



for DJ in names:
    frame = df.loc[DJ]
    if frame.shape[0] < 800:
        print(DJ + " played too few songs :(")
        print(frame.shape[0])


